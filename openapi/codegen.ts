import { mkdir, readFile, writeFile } from "node:fs/promises";
import { dirname, resolve } from "node:path";
import { fileURLToPath } from "node:url";
import YAML from "yaml";
import openapiTS, { astToString } from "openapi-typescript";

const __dirname = dirname(fileURLToPath(import.meta.url));

// eslint-disable-next-line @typescript-eslint/no-explicit-any
async function loadSpec(path: string): Promise<any> {
  const raw = await readFile(path, "utf8");
  const spec = (() => {
    try {
      return JSON.parse(raw);
    } catch {
      return YAML.parse(raw);
    }
  })();
  if (!spec?.openapi || !/^3\./.test(String(spec.openapi))) {
    throw new Error("Spec must be OpenAPI 3.x (got: " + String(spec?.openapi ?? "unknown") + ")");
  }
  return spec;
}

async function main() {
  const CANDIDATES = ["./tmdb.v3.yaml", "./tmdb.v3.json"];
  let specPath: string | null = null;
  for (const c of CANDIDATES) {
    const p = resolve(__dirname, c);
    try {
      await readFile(p);
      specPath = p;
      break;
    } catch {
      /* ignore missing file */
    }
  }
  if (!specPath) {
    throw new Error("No local spec found. Expected one of: " + CANDIDATES.join(", "));
  }

  const spec = await loadSpec(specPath);
  const ast = await openapiTS(spec, {
    inject:
      "/* eslint-disable */\n// AUTO-GENERATED by openapi/codegen.ts — DO NOT EDIT.\n" +
      `// Source: ${specPath}\n`,
  });

  const outPath = resolve(__dirname, "../src/generated/tmdb.ts");
  await mkdir(dirname(outPath), { recursive: true });
  await writeFile(outPath, astToString(ast), "utf8");
  console.log("✅ Wrote", outPath);
}

main().catch((err) => {
  console.error("❌ Codegen failed:", err);
  process.exit(1);
});
